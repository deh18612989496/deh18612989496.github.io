{"meta":{"title":"DRH","subtitle":null,"description":null,"author":"JACK","url":"http://yoursite.com","root":"/"},"pages":[{"title":"tags","date":"2019-03-29T12:53:38.000Z","updated":"2019-03-29T12:53:38.765Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"AB压力测试(同步，异步测试)","slug":"AB压力测试(同步，异步测试)","date":"2019-02-23T02:41:49.681Z","updated":"2019-03-30T10:06:41.872Z","comments":true,"path":"2019/02/23/AB压力测试(同步，异步测试)/","link":"","permalink":"http://yoursite.com/2019/02/23/AB压力测试(同步，异步测试)/","excerpt":"","text":"#同步测试(一直执行一个一直等到执行完) #测试前将cmd ，cd到安装有ab的文件的整个目录下 #要用pip install tornado==4.5（在terminal下输入卸载：pip uninstall tornado） #sync_tornado.py 123456789101112131415161718192021222324252627import tornado.webimport tornado.ioloopimport tornado.httpclientclass IndexHandler(tornado.web.RequestHandler): def get(self): # 路由中传递的参数，/index/?q=python q = self.get_argument(&apos;q&apos;) # 向地址发送请求: https://cn.bing.com/search?q= client = tornado.httpclient.HTTPClient() response = client.fetch(&apos;https://cn.bing.com/search?q=%s&apos; % q) print(response) self.write(&apos;同步测试&apos;)def make_app(): return tornado.web.Application(handlers=[ (r&apos;/index/&apos;, IndexHandler), ])if __name__ == &apos;__main__&apos;: app = make_app() app.listen(8000) tornado.ioloop.IOLoop.current().start() #异步：会有一个装饰机器让连接不会断掉，并且同时执行多个连接. #aync_tornado.py123456789101112131415161718192021222324252627282930import tornado.webimport tornado.ioloopimport tornado.httpclientclass IndexHandler(tornado.web.RequestHandler): @tornado.web.asynchronous def get(self): q = self.get_argument(&apos;q&apos;) client = tornado.httpclient.AsyncHTTPClient() client.fetch(&apos;https://cn.bing.com/search?q=%s&apos; % q, callback=self.on_response) self.write(&apos;异步测试&apos;) def on_response(self, response): # 回调，当页面响应，则调用回调函数on_response print(response) self.write(&apos;回调执行&apos;) self.finish()def make_app(): return tornado.web.Application(handlers=[ (r&apos;/index/&apos;, IndexHandler), ])if __name__ == &apos;__main__&apos;: app = make_app() app.listen(8080) tornado.ioloop.IOLoop.current().start() #aync_tornado2.py(异步镶嵌异步一般不用比较繁琐)1234567891011121314151617181920212223242526import tornado.webimport tornado.ioloopimport tornado.httpclientclass IndexHandler(tornado.web.RequestHandler): @tornado.web.asynchronous @tornado.web.gen.coroutine def get(self): q = self.get_argument(&apos;q&apos;) client = tornado.httpclient.AsyncHTTPClient() response = yield client.fetch(&apos;https://cn.bing.com/search?q=%s&apos; % q) print(response) self.write(&apos;异步测试&apos;)def make_app(): return tornado.web.Application(handlers=[ (r&apos;/index/&apos;, IndexHandler), ])if __name__ == &apos;__main__&apos;: app = make_app() app.listen(8090) tornado.ioloop.IOLoop.current().start()","categories":[],"tags":[{"name":"标签","slug":"标签","permalink":"http://yoursite.com/tags/标签/"}]},{"title":"日志的搭建（日志就是能把错误收集在一起的.log）","slug":"日志搭建","date":"2019-02-22T10:42:15.433Z","updated":"2019-03-30T10:10:43.993Z","comments":true,"path":"2019/02/22/日志搭建/","link":"","permalink":"http://yoursite.com/2019/02/22/日志搭建/","excerpt":"","text":"#day04/setting.py(在最下面 的setting.py加入下面代码)12345678910111213141516171819202122232425262728293031323334# 日志配置LOG_PATH = os.path.join(BASE_DIR, &apos;logs&apos;)LOGGING = &#123; # 必须为1 &apos;version&apos;: 1, # 禁用日志 &apos;disable_existing_loggers&apos;: False, &apos;loggers&apos;: &#123; &apos;&apos;: &#123; # 将系统接收到的日志，交给handler去处理 &apos;handlers&apos;: [&apos;console&apos;], &apos;level&apos;: &apos;INFO&apos;, &#125; &#125;, &apos;handlers&apos;: &#123; &apos;console&apos;: &#123; # handler将日志信息存放在day07/logs/sys.log &apos;filename&apos;: &apos;%s/%s&apos; % (LOG_PATH, &apos;sys.log&apos;), &apos;level&apos;: &apos;INFO&apos;, # 指定日志的格式 &apos;formatter&apos;: &apos;default&apos;, # 备份 &apos;class&apos;: &apos;logging.handlers.RotatingFileHandler&apos;, # 日志文件大小: 5M &apos;maxBytes&apos;: 5 * 1024 * 1024, &#125; &#125;, &apos;formatters&apos;:&#123; &apos;default&apos;: &#123; &apos;format&apos;: &apos;%(asctime)s %(message)s&apos; &#125; &#125;&#125; #并在上面的文件MIDDLEWARE 里面加1&apos;utils.LogMiddleware.LogMiddle&apos;, #utils/LogMiddleware.py123456789101112131415161718192021222324252627282930313233343536import loggingimport timefrom django.utils.deprecation import MiddlewareMixin# 获取日志loggerlogger = logging.getLogger(__name__)class LogMiddle(MiddlewareMixin): # 日志处理中间件 def process_request(self, request): # 存放请求过来时的时间 request.init_time = time.time() return None def process_response(self, request, response): try: # 请求响应时，耗时时长 total_time = time.time() - request.init_time # 请求路径 path = request.path # 请求方式 method = request.method # 响应状态码 status_code = response.status_code # 响应内容 content = response.content # 记录信息 message = &apos;%s %s %s %s %s&apos; % (total_time, path, method, status_code, content) logger.info(message) except: logger.critical(&apos;系统错误&apos;) return response #日志级别等级CRITICAL &gt; ERROR &gt; WARNING &gt; INFO &gt; DEBUG &gt; NOTSET","categories":[],"tags":[]},{"title":"Tornado简单的人脸识别","slug":"Tornado利用阿里云实现人脸识别","date":"2018-09-30T09:25:30.000Z","updated":"2019-03-30T10:15:38.117Z","comments":true,"path":"2018/09/30/Tornado利用阿里云实现人脸识别/","link":"","permalink":"http://yoursite.com/2018/09/30/Tornado利用阿里云实现人脸识别/","excerpt":"","text":"#通过百度云的AI开放平台的接口来实现的ai的人脸识别 #安装环境：requirement.txt (pip install -r requirement.txt) 1234pymysqlsqlalchemytornado==4.5baidu-aip #manage.py123456789101112131415161718192021222324252627282930import osimport tornado.webimport tornado.ioloopfrom tornado.options import parse_command_line, options, definefrom face.views import RegisterHandler, InitDbHandler, LogonHandlerdefine(&apos;port&apos;,default=80,type=int)def make_app(): return tornado.web.Application(handlers=[ (r&apos;/register/&apos;,RegisterHandler), (r&apos;/init_db/&apos;, InitDbHandler), (r&apos;/login/&apos;,LogonHandler) ], template_path=os.path.join(os.path.dirname(os.path.abspath(__file__)), &apos;templates&apos;), static_path=os.path.join(os.path.dirname(os.path.abspath(__file__)), &apos;static&apos;), )if __name__ == &apos;__main__&apos;: parse_command_line() app=make_app() app.listen(options.port) tornado.ioloop.IOLoop.current().start() #face/models.py 123456789101112131415from datetime import datetimefrom sqlalchemy import Column,Integer,String,DateTimefrom untils.conn import Basedef init_db(): Base.metadata.create_all()class User(Base): id=Column(Integer,primary_key=True,autoincrement=True) username=Column(String(10), unique=True, nullable=False) realname = Column(String(10), unique=True, nullable=False) create_time = Column(DateTime, default=datetime.now) __tablename__ = &apos;user&apos; #face/views.py123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657import tornado.webfrom face.models import init_db, Userfrom untils.conn import Base, sessionfrom untils.faceid import face_register, face_loginclass RegisterHandler(tornado.web.RequestHandler): def get(self): error=&apos;&apos; self.render(&apos;register.html&apos;, error=error) def post(self): #注册 face=self.get_argument(&apos;face_img&apos;) img = face.split(&apos;,&apos;)[-1] username=self.get_argument(&apos;username&apos;) realname=self.get_argument(&apos;realname&apos;) if face and username and realname: #条用百度接口注册 user=User() user.username = username user.realname = realname session.add(user) session.commit() res = face_register(img,user.id) if res: self.redirect(&apos;/login/&apos;) else: session.delete(user) session.commit() self.redirect(&apos;/register/&apos;) else: error = &apos;请填写完整！&apos; self.render(&apos;register.html&apos;, error=error)class InitDbHandler(tornado.web.RequestHandler): def get(self): #将模型映射到数据库中 #Base.metadata.create_all() init_db() self.write(&apos;创建表成功&apos;)class LogonHandler(tornado.web.RequestHandler): def get(self): self.render(&apos;login.html&apos;) def post(self): face = self.get_argument(&apos;face_img&apos;) img = face.split(&apos;,&apos;)[-1] res = face_login(img) if res: self.write(&apos;成功&apos;) else: self.write(&apos;失败&apos;) #static/js/ai.js12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182var video = document.querySelector(&apos;video&apos;);var audio, audioType;var canvas1 = document.getElementById(&apos;canvas1&apos;);var context1 = canvas1.getContext(&apos;2d&apos;);navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;window.URL = window.URL || window.webkitURL || window.mozURL || window.msURL;var exArray = []; //存储设备源IDMediaStreamTrack.getSources(function (sourceInfos) &#123; for (var i = 0; i != sourceInfos.length; ++i) &#123; var sourceInfo = sourceInfos[i]; //这里会遍历audio,video，所以要加以区分 if (sourceInfo.kind === &apos;video&apos;) &#123; exArray.push(sourceInfo.id); &#125; &#125;&#125;);function getMedia() &#123; if (navigator.getUserMedia) &#123; navigator.getUserMedia(&#123; &apos;video&apos;: &#123; &apos;optional&apos;: [&#123; &apos;sourceId&apos;: exArray[1] //0为前置摄像头，1为后置 &#125;] &#125;, &apos;audio&apos;:true &#125;, successFunc, errorFunc); //success是获取成功的回调函数 &#125; else &#123; alert(&apos;Native device media streaming (getUserMedia) not supported in this browser.&apos;); &#125;&#125;function successFunc(stream) &#123; //alert(&apos;Succeed to get media!&apos;); if (video.mozSrcObject !== undefined) &#123; //Firefox中，video.mozSrcObject最初为null，而不是未定义的，我们可以靠这个来检测Firefox的支持 video.mozSrcObject = stream; &#125; else &#123; video.src = window.URL &amp;&amp; window.URL.createObjectURL(stream) || stream; &#125; //video.play(); // 音频 audio = new Audio(); audioType = getAudioType(audio); if (audioType) &#123; audio.src = &apos;polaroid.&apos; + audioType; audio.play(); &#125;&#125;function errorFunc(e) &#123; alert(&apos;Error！&apos;+e);&#125;//获取音频格式function getAudioType(element) &#123; if (element.canPlayType) &#123; if (element.canPlayType(&apos;audio/mp4; codecs=&quot;mp4a.40.5&quot;&apos;) !== &apos;&apos;) &#123; return (&apos;aac&apos;); &#125; else if (element.canPlayType(&apos;audio/ogg; codecs=&quot;vorbis&quot;&apos;) !== &apos;&apos;) &#123; return (&quot;ogg&quot;); &#125; &#125; return false;&#125;//拍照function getPhoto() &#123; context1.drawImage(video, 0, 0,220,220); //将video对象内指定的区域捕捉绘制到画布上指定的区域，实现拍照。 var face = $(&apos;#face&apos;) var canvas1 = document.getElementById(&apos;canvas1&apos;); face.val(canvas1.toDataURL(&apos;image/png&apos;))&#125; #templates/login.html(登陆界面)123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;登录&lt;/title&gt; &lt;script src=&quot;https://code.jquery.com/jquery-3.0.0.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=&quot;button&quot; value=&quot;摄像&quot; onclick=&quot;getMedia()&quot;&gt; &lt;video src=&quot;&quot; autoplay=&quot;autoplay&quot; height=&quot;120px&quot;&gt;&lt;/video&gt; &lt;canvas id=&quot;canvas1&quot; height=&quot;220px&quot; width=&quot;200&quot;&gt;&lt;/canvas&gt; &lt;input type=&quot;button&quot; value=&quot;拍照&quot; height=&quot;120px&quot; onclick=&quot;getPhoto();&quot;&gt; &lt;form action=&quot;&quot; method=&quot;post&quot;&gt; &lt;input type=&quot;hidden&quot; id=&quot;face&quot; name=&quot;face_img&quot;&gt; &lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/p&gt; &lt;/form&gt; &lt;script src=&quot;&#123;&#123; static_url(&apos;js/ai.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; #templates/register.html(注册界面)1234567891011121314151617181920212223&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;注册&lt;/title&gt; &lt;script src=&quot;https://code.jquery.com/jquery-3.0.0.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=&quot;button&quot; value=&quot;摄像&quot; onclick=&quot;getMedia()&quot;&gt; &lt;video src=&quot;&quot; autoplay=&quot;autoplay&quot; height=&quot;120px&quot;&gt;&lt;/video&gt; &lt;canvas id=&quot;canvas1&quot; height=&quot;220px&quot; width=&quot;200&quot;&gt;&lt;/canvas&gt; &lt;input type=&quot;button&quot; value=&quot;拍照&quot; height=&quot;120px&quot; onclick=&quot;getPhoto();&quot;&gt; &lt;form action=&quot;&quot; method=&quot;post&quot;&gt; &lt;input type=&quot;hidden&quot; id=&quot;face&quot; name=&quot;face_img&quot;&gt; &lt;p&gt;账号： &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;/p&gt; &lt;p&gt;真实姓名： &lt;input type=&quot;text&quot; name=&quot;realname&quot;&gt;&lt;/p&gt; &lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/p&gt; &lt;/form&gt; &lt;script src=&quot;&#123;&#123; static_url(&apos;js/ai.js&apos;) &#125;&#125;&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; #untils/conn.py123456789101112131415161718from sqlalchemy import create_enginefrom sqlalchemy.ext.declarative import declarative_basefrom sqlalchemy.orm import sessionmaker# 连接数据库格式# mysql+pymysql://root:123456@127.0.0.1:3306/tornado9db_url = &apos;mysql+pymysql://root:DENG5rong2hua0!@127.0.0.1:3306/tornado9&apos;# 创建引擎，建立连接engine = create_engine(db_url)# 模型与数据库表进行关联的基类，模型必须继承于BaseBase = declarative_base(bind=engine)# 创建session会话DbSession = sessionmaker(bind=engine)session = DbSession() #untils/faceid.py123456789101112131415161718192021from aip import AipFace&quot;&quot;&quot; 你的 APPID AK SK &quot;&quot;&quot;APP_ID = &apos;15752252&apos;API_KEY = &apos;IwwxkcwUr6TBUYCfhCHD97e4&apos;SECRET_KEY = &apos;fKyhxKGR6P1XlP6iXfGzlVajagViHdgt&apos;client = AipFace(APP_ID, API_KEY, SECRET_KEY)def face_register(image,userId,imageType=&apos;BASE64&apos;,groupId=&apos;user&apos;): res = client.addUser(image, imageType,groupId,userId) if res[&apos;error_code&apos;]: return False return Truedef face_login(image, imageType = &apos;BASE64&apos;, groupId = &apos;user&apos;): res = client.search(image,imageType,groupId) # print(res) if res[&apos;error_code&apos;]: return False return True","categories":[],"tags":[]}]}